// Code generated by protoc-gen-go.
// source: public.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	public.proto

It has these top-level messages:
	SubscribeRequest
	PublishRequest
	PublishResponse
	CreateTopicRequest
	CreateTopicResponse
	ClientID
	PartitionID
	TopicMeta
	Messages
	Message
	MessageWithOffset
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeRequest struct {
	ClientID    *ClientID    `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
	PartitionID *PartitionID `protobuf:"bytes,2,opt,name=partitionID" json:"partitionID,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubscribeRequest) GetClientID() *ClientID {
	if m != nil {
		return m.ClientID
	}
	return nil
}

func (m *SubscribeRequest) GetPartitionID() *PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return nil
}

type PublishRequest struct {
	PartitionID *PartitionID `protobuf:"bytes,1,opt,name=partitionID" json:"partitionID,omitempty"`
	Messages    []*Message   `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishRequest) GetPartitionID() *PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return nil
}

func (m *PublishRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PublishResponse struct {
	Offsets []int64 `protobuf:"varint,1,rep,packed,name=offsets" json:"offsets,omitempty"`
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PublishResponse) GetOffsets() []int64 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

type CreateTopicRequest struct {
	Meta *TopicMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *CreateTopicRequest) Reset()                    { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()               {}
func (*CreateTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTopicRequest) GetMeta() *TopicMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type CreateTopicResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *CreateTopicResponse) Reset()                    { *m = CreateTopicResponse{} }
func (m *CreateTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTopicResponse) ProtoMessage()               {}
func (*CreateTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTopicResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ClientID struct {
	ConsumerGroup string `protobuf:"bytes,1,opt,name=consumerGroup" json:"consumerGroup,omitempty"`
	ConsumerID    string `protobuf:"bytes,2,opt,name=consumerID" json:"consumerID,omitempty"`
}

func (m *ClientID) Reset()                    { *m = ClientID{} }
func (m *ClientID) String() string            { return proto.CompactTextString(m) }
func (*ClientID) ProtoMessage()               {}
func (*ClientID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClientID) GetConsumerGroup() string {
	if m != nil {
		return m.ConsumerGroup
	}
	return ""
}

func (m *ClientID) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

type PartitionID struct {
	Topic     string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Partition int32  `protobuf:"varint,2,opt,name=partition" json:"partition,omitempty"`
}

func (m *PartitionID) Reset()                    { *m = PartitionID{} }
func (m *PartitionID) String() string            { return proto.CompactTextString(m) }
func (*PartitionID) ProtoMessage()               {}
func (*PartitionID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PartitionID) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PartitionID) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type TopicMeta struct {
	Topic      string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Partitions int32  `protobuf:"varint,2,opt,name=partitions" json:"partitions,omitempty"`
	Replicas   int32  `protobuf:"varint,3,opt,name=replicas" json:"replicas,omitempty"`
}

func (m *TopicMeta) Reset()                    { *m = TopicMeta{} }
func (m *TopicMeta) String() string            { return proto.CompactTextString(m) }
func (*TopicMeta) ProtoMessage()               {}
func (*TopicMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TopicMeta) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *TopicMeta) GetPartitions() int32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *TopicMeta) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

type Messages struct {
	Messages []*MessageWithOffset `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *Messages) Reset()                    { *m = Messages{} }
func (m *Messages) String() string            { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()               {}
func (*Messages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Messages) GetMessages() []*MessageWithOffset {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Message struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MessageWithOffset struct {
	Offset  int64    `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *MessageWithOffset) Reset()                    { *m = MessageWithOffset{} }
func (m *MessageWithOffset) String() string            { return proto.CompactTextString(m) }
func (*MessageWithOffset) ProtoMessage()               {}
func (*MessageWithOffset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MessageWithOffset) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MessageWithOffset) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "pb.SubscribeRequest")
	proto.RegisterType((*PublishRequest)(nil), "pb.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "pb.PublishResponse")
	proto.RegisterType((*CreateTopicRequest)(nil), "pb.CreateTopicRequest")
	proto.RegisterType((*CreateTopicResponse)(nil), "pb.CreateTopicResponse")
	proto.RegisterType((*ClientID)(nil), "pb.ClientID")
	proto.RegisterType((*PartitionID)(nil), "pb.PartitionID")
	proto.RegisterType((*TopicMeta)(nil), "pb.TopicMeta")
	proto.RegisterType((*Messages)(nil), "pb.Messages")
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*MessageWithOffset)(nil), "pb.MessageWithOffset")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UltrabusNode service

type UltrabusNodeClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UltrabusNode_SubscribeClient, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
}

type ultrabusNodeClient struct {
	cc *grpc.ClientConn
}

func NewUltrabusNodeClient(cc *grpc.ClientConn) UltrabusNodeClient {
	return &ultrabusNodeClient{cc}
}

func (c *ultrabusNodeClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (UltrabusNode_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UltrabusNode_serviceDesc.Streams[0], c.cc, "/pb.UltrabusNode/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ultrabusNodeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UltrabusNode_SubscribeClient interface {
	Recv() (*Messages, error)
	grpc.ClientStream
}

type ultrabusNodeSubscribeClient struct {
	grpc.ClientStream
}

func (x *ultrabusNodeSubscribeClient) Recv() (*Messages, error) {
	m := new(Messages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ultrabusNodeClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := grpc.Invoke(ctx, "/pb.UltrabusNode/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ultrabusNodeClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := grpc.Invoke(ctx, "/pb.UltrabusNode/CreateTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UltrabusNode service

type UltrabusNodeServer interface {
	Subscribe(*SubscribeRequest, UltrabusNode_SubscribeServer) error
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
}

func RegisterUltrabusNodeServer(s *grpc.Server, srv UltrabusNodeServer) {
	s.RegisterService(&_UltrabusNode_serviceDesc, srv)
}

func _UltrabusNode_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UltrabusNodeServer).Subscribe(m, &ultrabusNodeSubscribeServer{stream})
}

type UltrabusNode_SubscribeServer interface {
	Send(*Messages) error
	grpc.ServerStream
}

type ultrabusNodeSubscribeServer struct {
	grpc.ServerStream
}

func (x *ultrabusNodeSubscribeServer) Send(m *Messages) error {
	return x.ServerStream.SendMsg(m)
}

func _UltrabusNode_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltrabusNodeServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UltrabusNode/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltrabusNodeServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UltrabusNode_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltrabusNodeServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UltrabusNode/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltrabusNodeServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UltrabusNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UltrabusNode",
	HandlerType: (*UltrabusNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _UltrabusNode_Publish_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _UltrabusNode_CreateTopic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _UltrabusNode_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "public.proto",
}

func init() { proto.RegisterFile("public.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0xac, 0x63, 0xda, 0xd8, 0x63, 0xa7, 0x69, 0x5f, 0x29, 0x44, 0xe1, 0x43, 0x61, 0x05, 0x22,
	0xa7, 0x00, 0x09, 0xdc, 0x8b, 0x5a, 0x09, 0xf5, 0x50, 0xa8, 0x80, 0x0a, 0xae, 0xb6, 0x79, 0xa5,
	0x56, 0x9d, 0xac, 0xf1, 0xae, 0x91, 0xf8, 0x6d, 0xfc, 0x39, 0xb4, 0x9b, 0x8d, 0x71, 0x92, 0x5e,
	0x27, 0xf3, 0xb1, 0x99, 0x37, 0x46, 0x5c, 0xd6, 0x69, 0x91, 0x67, 0x93, 0xb2, 0x92, 0x5a, 0x52,
	0xa7, 0x4c, 0xc5, 0x77, 0x1c, 0x7c, 0xa9, 0x53, 0x95, 0x55, 0x79, 0xca, 0x9f, 0xf9, 0x57, 0xcd,
	0x4a, 0xd3, 0x53, 0x04, 0x59, 0x91, 0xf3, 0x42, 0x9f, 0x9f, 0x0d, 0xbc, 0x91, 0x37, 0x8e, 0xa6,
	0xf1, 0xa4, 0x4c, 0x27, 0xa7, 0x0e, 0xa3, 0xe7, 0x88, 0xca, 0xa4, 0xd2, 0xb9, 0xce, 0xe5, 0xe2,
	0xfc, 0x6c, 0xd0, 0xb1, 0x94, 0xbe, 0xa1, 0x5c, 0xfe, 0x87, 0xc5, 0x15, 0xf6, 0x2f, 0x4d, 0x9a,
	0xba, 0x59, 0xf9, 0x6e, 0xe8, 0xbc, 0x3b, 0x75, 0xf4, 0x04, 0xc1, 0x9c, 0x95, 0x4a, 0x7e, 0xb2,
	0x1a, 0xf8, 0x23, 0x7f, 0x1c, 0x4d, 0x23, 0x43, 0xb9, 0x58, 0x62, 0x42, 0xa0, 0xdf, 0xd8, 0xaa,
	0x52, 0x2e, 0x14, 0x53, 0x1f, 0x5d, 0x79, 0x7d, 0xad, 0x58, 0xab, 0x81, 0x37, 0xf2, 0xc7, 0xbe,
	0x78, 0x03, 0x3a, 0xad, 0x38, 0xd1, 0xfc, 0x55, 0x96, 0x79, 0xb6, 0x8a, 0x7f, 0x84, 0x7b, 0x73,
	0xd6, 0x89, 0xcb, 0xed, 0x19, 0x53, 0xfb, 0xfb, 0x05, 0xeb, 0x44, 0x3c, 0xc3, 0xd1, 0x9a, 0xc4,
	0x59, 0x03, 0x1d, 0x79, 0x6b, 0x15, 0x81, 0x78, 0x87, 0xa0, 0xa9, 0xe0, 0x18, 0xbd, 0x4c, 0x2e,
	0x54, 0x3d, 0xe7, 0xea, 0x43, 0x25, 0xeb, 0xd2, 0x52, 0x42, 0x22, 0x60, 0x05, 0xbb, 0x62, 0x42,
	0xf1, 0x0a, 0x51, 0xfb, 0xef, 0xf5, 0xb0, 0xab, 0x4d, 0x84, 0x53, 0x1c, 0x22, 0x6c, 0x3a, 0xb1,
	0x82, 0x5d, 0x71, 0x82, 0xb0, 0x79, 0xd7, 0x26, 0x9d, 0x80, 0x86, 0xae, 0x96, 0x7c, 0x3a, 0x40,
	0x50, 0x71, 0x59, 0xe4, 0x59, 0x62, 0x0a, 0x33, 0x0e, 0x33, 0x04, 0xae, 0x2e, 0x45, 0x2f, 0x5b,
	0x75, 0x7a, 0xb6, 0xce, 0xe3, 0x56, 0x9d, 0xdf, 0x72, 0x7d, 0xf3, 0xc9, 0x76, 0x27, 0x5e, 0xa0,
	0xeb, 0x40, 0x8a, 0xe0, 0xdf, 0xf2, 0x1f, 0x1b, 0x19, 0x9b, 0x17, 0xfc, 0x4e, 0x8a, 0x9a, 0x6d,
	0x5a, 0x2c, 0xde, 0xe3, 0x70, 0x4b, 0x4b, 0xfb, 0xd8, 0x5b, 0x5e, 0xc0, 0x6a, 0x7c, 0x7a, 0x8c,
	0xae, 0x0b, 0x75, 0xeb, 0x68, 0x9f, 0x70, 0xfa, 0xd7, 0x43, 0x7c, 0x55, 0xe8, 0x2a, 0x49, 0x6b,
	0xf5, 0x51, 0xfe, 0x60, 0x9a, 0x21, 0x6c, 0x46, 0x48, 0xf7, 0x0d, 0x75, 0x73, 0x93, 0xc3, 0xb8,
	0x65, 0xa0, 0xc4, 0xce, 0x6b, 0x8f, 0xde, 0xa2, 0xeb, 0x86, 0x40, 0x64, 0x37, 0xb4, 0x36, 0xb6,
	0xe1, 0xd1, 0x1a, 0xb6, 0x3c, 0xa7, 0xd8, 0xa1, 0x13, 0x44, 0xad, 0x3b, 0xd3, 0x03, 0x3b, 0xec,
	0xad, 0xad, 0x0c, 0x1f, 0x6e, 0xe1, 0x2b, 0x87, 0x74, 0xcf, 0x7e, 0x3c, 0xb3, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb8, 0xb8, 0x1e, 0xc0, 0x4c, 0x03, 0x00, 0x00,
}
